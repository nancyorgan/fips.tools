row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00", "INTPTLAT00", "INTPTLON00"))
names(final) = c("id", "FIPS", "lat", "long")
final$lat = as.character(final$lat)
final$lat = gsub("\\+", "", final$lat)
final$long = as.character(final$long)
final$long = gsub("\\+", "", final$long)
return(final)
}
FIPS_converter("Some house", 44.079216,-92.66854, Mayo)
FIPS_converter = function(id, lat, long, state_data){
dat = data.frame(id, lat, long)
rownames(dat) = dat$id
coordinates(dat) <- ~ long + lat
proj4string(dat) <- proj4string(state_data)
final = over(dat, state_data)
final$id = row.names(final)
row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00", "INTPTLAT00", "INTPTLON00"))
names(final) = c("id", "FIPS", "lat", "long")
final$lat = as.character(final$lat)
final$lat = as.numeric(gsub("\\+", "", final$lat))
final$long = as.character(final$long)
final$long = as.numeric(gsub("\\+", "", final$long))
return(final)
}
FIPS_converter("Some house", 44.079216,-92.66854, Mayo)
FIPS_converter = function(id, lat, long, state_data){
dat = data.frame(id, lat, long)
rownames(dat) = dat$id
coordinates(dat) <- ~ long + lat
proj4string(dat) <- proj4string(state_data)
final = over(dat, state_data)
final$id = row.names(final)
row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00", "INTPTLAT00", "INTPTLON00"))
names(final) = c("id", "FIPS", "lat", "long")
final$lat = as.character(final$lat)
final$lat = gsub("\\+", "", final$lat)
final$long = as.character(final$long)
final$long = gsub("\\+", "", final$long)
return(final)
}
FIPS_converter("Some house", 44.079216,-92.66854, Mayo)
FIPS_converter = function(id, lat, long, state_data){
dat = data.frame(id, lat, long)
rownames(dat) = dat$id
coordinates(dat) <- ~ long + lat
proj4string(dat) <- proj4string(state_data)
final = over(dat, state_data)
final$id = row.names(final)
row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00"))
names(final) = c("id", "FIPS")
return(final)
}
FIPS_converter("Some house", 44.079216,-92.66854, Mayo)
getwd()
setwd("/Users/organn/Documents/race_imputation/fips.tools/")
getwd()
document()
setwd("/Users/organn/Documents/race_imputation")
install("fips.tools")
View(fipsdf)
fipsdf
install("fips.tools")
getwd()
?fips.df
?fips.tools
library("fips.tools")
?fips.tools
??fips.tools
getwd()
ls
getwd()
library("roxygen2")
library("devtools")
document()
setwd("..")
getwd()
install("fips.tools")
library("fips.tools")
?FIPS_converter
Mayo = grab_shapefiles(c("MN", "WI"))
FIPS_converter("Some house", 44.079216,-92.66854, Mayo)
FIPS_converter("Some house",
c(44.079216, 44.079216, 44.079216),
c(-92.66854, -92.66854, -92.66854),
Mayo)
FIPS_converter(c("Some house", "Some house"),
c(44.079216, 44.079216, 44.079216),
c(-92.66854, -92.66854, -92.66854),
Mayo)
id = c("Some house 1", "Some house 2")
lat = c(44.079216, 44.079216, 44.079216)
long = c(-92.66854, -92.66854, -92.66854)
state_data = Mayo
dat = data.frame(id, lat, long)
dat
data.frame(id, lat, long)
id = c("Some house 1", "Some house 2", "Some house 3")
lat = c(44.079216, 44.079216, 44.079216)
long = c(-92.66854, -92.66854, -92.66854)
state_data = Mayo
dat = data.frame(id, lat, long)
rownames(dat) = dat$id
coordinates(dat) <- ~ long + lat
dat
proj4string(dat) <- proj4string(state_data)
final = over(dat, state_data)
final
final$id = row.names(final)
row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00"))
names(final) = c("id", "FIPS")
final
id = c("Some house 1", "Some house 2", "Some house 3")
lat = c(44.079216, 45.8283963, 46.1252037)
long = c(-92.66854, -95.4019813, -95.4569129)
dat = data.frame(id, lat, long)
rownames(dat) = dat$id
coordinates(dat) <- ~ long + lat
proj4string(dat) <- proj4string(state_data)
final = over(dat, state_data)
final$id = row.names(final)
row.names(final) = c(1:length(id))
final = subset(final, select = c("id", "BKGPIDFP00"))
names(final) = c("id", "FIPS")
final
getwd()
setwd("fips.tools/")
getwd()
doucment()
document()
?grab_shapefiles
grab_shapefiles
13 - 3- 2
fipsdf$abbrv
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "*"){
state_abbrv = fipsdf$abbrv
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
all = grab_shapefiles("everything")
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
state_abbrv = "everything"
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
state_abbrv
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
state_abbrv = "everything"
if(state_abbrv == "everything"){
state_abbrv = fipsdf$abbrv
}
state_data = list()
state_number = NULL
length(unique(state_abbrv))
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
state_abbrv[i]
as.vector(fipsdf$abbrv)
state_abbrv = "everything"
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$abbrv)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
length(unique(state_abbrv))
i
state_abbrv[i]
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
grab_shapefiles = function(state_abbrv){
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles(c("MN", "WI"))
dput(unique(fipsdf$abbrv))
unique(fipsdf$abbrv)
as.vector(unique(fipsdf$abbrv))
this = grab_shapefiles(as.vector(unique(fipsdf$abbrv)))
this = grab_shapefiles(c("AL")
this = grab_shapefiles(as.vector(unique(fipsdf$abbrv)))
this = grab_shapefiles("AL")
this = grab_shapefiles("AK")
this = grab_shapefiles("TN")
this = grab_shapefiles("MN")
this = grab_shapefiles("CA")
this = grab_shapefiles("PA")
this = grab_shapefiles("RI")
state_number[i],
state_number[i]
paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip")
fipsdf
url = "https://www.census.gov/geo/reference/ansi_statetables.html"
webpage <- readLines(url)
readHTMLTable(webpage, header = T, stringsAsFactors = F)
fipsdf <- readHTMLTable(webpage, header = T, stringsAsFactors = F)[[1]]
library(rgeos)
library(sp)
library(rgdal)
url = "https://www.census.gov/geo/reference/ansi_statetables.html"
webpage <- readLines(url)
readHTMLTable(webpage, header = T, stringsAsFactors = F)
?readHTMLtable
?readHTMLtable
??readHTMLtable
library("XML")
readHTMLTable(webpage, header = T, stringsAsFactors = F)
fipsdf <- readHTMLTable(webpage, header = T, stringsAsFactors = F)[[1]]
names(fipsdf) = c("name", "code", "abbrv")
fipsdf = subset(fipsdf, select = c("abbrv", "code"))
fipsdf$code = as.character(fipsdf$code)
head(fipsdf)
save(fipsdf, file = "/Users/organn/Documents/race_imputation/fips.tools/data/fipsdf.Rdata")
fipsdf
grab_shapefiles = function(state_abbrv){
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles("RI")
this = grab_shapefiles("AL")
as.vector(fipsdf$code)
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this2 = grab_shapefiles("everything")
fipsdf$code
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this2 = grab_shapefiles("everything")
state_abbrv
state_data = list()
state_number = NULL
length(unique(state_abbrv))
state_number[i]
state_abbrv[i]
i = 1
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles("AL")
this = grab_shapefiles("MN")
fipsdf
fipsdf$code
i = 1
paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip")
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles("MN")
this = grab_shapefiles("AL")
this = grab_shapefiles("everything")
this = grab_shapefiles(as.vector(fipsdf$abbrv))
this = grab_shapefiles("AK")
this = grab_shapefiles("AK")
this = grab_shapefiles(as.vector(fipsdf$abbrv))
this = grab_shapefiles("everything")
this = grab_shapefiles("everything")
this = grab_shapefiles("everything")
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$code)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles("everything")
grab_shapefiles = function(state_abbrv){
if(state_abbrv == "everything"){
state_abbrv = as.vector(fipsdf$abbrv)
}
state_data = list()
state_number = NULL
for(i in 1:length(unique(state_abbrv))){
state_number[i] = fipsdf$code[fipsdf$abbrv == state_abbrv[i]]
temp.dir = tempdir()
temp.file = tempfile()
download.file(url = paste0("https://www2.census.gov/geo/tiger/TIGER2010/BG/2010/tl_2010_",
state_number[i],"_bg10.zip"), destfile = temp.file)
data = unzip(zipfile = temp.file, exdir = temp.dir)
state_data[[i]] = readOGR(grep(".shp$", data, value = TRUE))
unlink(temp.dir)
unlink(temp.file)
}
final = do.call(rbind,c(state_data,list(makeUniqueIDs=TRUE)))
return(final)
}
this = grab_shapefiles("everything")
?grab_shapefiles
getwd9
getwd()
document()
